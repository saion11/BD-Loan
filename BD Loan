<!DOCTYPE html>
<html lang="bn">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BD LOAN - ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡ßã‡¶® ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®</title>
    <style>
        body {
            font-family: 'Kalpurush', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: #333;
        }
        .container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            padding-bottom: 70px;
        }
        .card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .btn {
            display: block;
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 5px;
            margin: 10px 0;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
        }
        .btn-primary {
            background-color: #10B981;
            color: white;
        }
        .btn-secondary {
            background-color: #3B82F6;
            color: white;
        }
        .btn-danger {
            background-color: #EF4444;
            color: white;
        }
        .btn-link {
            background: none;
            border: none;
            color: #3B82F6;
            text-decoration: underline;
            padding: 0;
            margin: 10px 0;
            cursor: pointer;
        }
        .form-group {
            margin-bottom: 15px;
            position: relative;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        .hidden {
            display: none;
        }
        .nav {
            display: flex;
            justify-content: space-around;
            background: white;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 10px 0;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
        }
        .nav-item {
            text-align: center;
            padding: 5px;
            cursor: pointer;
        }
        .loan-details {
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
        .transaction-item {
            border-bottom: 1px solid #eee;
            padding: 10px 0;
        }
        .toast {
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 12px 24px;
            border-radius: 4px;
            z-index: 1001;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }
        @keyframes fadein {
            from { bottom: 0; opacity: 0; }
            to { bottom: 80px; opacity: 1; }
        }
        @keyframes fadeout {
            from { bottom: 80px; opacity: 1; }
            to { bottom: 0; opacity: 0; }
        }
        .admin-nav {
            display: flex;
            justify-content: space-around;
            background: #1e40af;
            color: white;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 10px 0;
            z-index: 1000;
        }
        .admin-nav-item {
            text-align: center;
            padding: 5px;
            cursor: pointer;
        }
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 35px;
            cursor: pointer;
        }
        /* Added new styles for secure admin */
        .login-attempts {
            color: #EF4444;
            font-size: 14px;
            margin-top: 5px;
        }
        .session-timeout {
            position: fixed;
            top: 10px;
            right: 10px;
            background: #1e40af;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            z-index: 1002;
        }
    </style>
</head>
<body>
    <!-- Admin Navigation - Updated with secure functions -->
    <div class="admin-nav hidden" id="adminNav">
        <div class="admin-nav-item" onclick="secureShowAdminDashboard()">
            ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°
        </div>
        <div class="admin-nav-item" onclick="secureShowPendingLoans()">
            ‡¶≤‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®
        </div>
        <div class="admin-nav-item" onclick="secureShowPaymentSettings()">
            ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
        </div>
        <div class="admin-nav-item" onclick="logoutAdmin()">
            ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü
        </div>
    </div>

    <!-- User Navigation -->
    <div class="nav hidden" id="userNav">
        <div class="nav-item" onclick="showUserHome()">
            ‡¶π‡ßã‡¶Æ
        </div>
        <div class="nav-item" onclick="showLoanApplication()">
            ‡¶≤‡ßã‡¶® ‡¶®‡¶ø‡¶®
        </div>
        <div class="nav-item" onclick="showTransactions()">
            ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®
        </div>
        <div class="nav-item" onclick="logoutUser()">
            ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü
        </div>
    </div>

    <!-- Session timeout display -->
    <div id="sessionTimeout" class="session-timeout hidden">
        ‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑ ‡¶π‡¶¨‡ßá: <span id="timeoutCounter">05:00</span>
    </div>

    <div class="container">
        <!-- Login Selection -->
        <div id="loginSelection" class="card">
            <h2>‡¶≤‡¶ó‡¶ø‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
            <button class="btn btn-primary" onclick="showUserLogin()">‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶≤‡¶ó‡¶ø‡¶®</button>
            <button class="btn btn-secondary" onclick="showUserRegister()">‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®</button>
            <button class="btn btn-secondary" onclick="showAdminLogin()">‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶ø‡¶®</button>
        </div>

        <!-- User Registration Section -->
        <div id="userRegisterSection" class="card hidden">
            <h2>‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
            <div class="form-group">
                <label for="regPhone">‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
                <input type="tel" id="regPhone" placeholder="01XXXXXXXXX">
            </div>
            <div class="form-group">
                <label for="regName">‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ</label>
                <input type="text" id="regName" placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ">
            </div>
            <div class="form-group">
                <label for="regPassword">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
                <div style="position: relative;">
                    <input type="password" id="regPassword" placeholder="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°">
                    <span class="password-toggle" onclick="togglePassword('regPassword')">üëÅÔ∏è</span>
                </div>
            </div>
            <div class="form-group">
                <label for="regConfirmPassword">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®</label>
                <div style="position: relative;">
                    <input type="password" id="regConfirmPassword" placeholder="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®">
                    <span class="password-toggle" onclick="togglePassword('regConfirmPassword')">üëÅÔ∏è</span>
                </div>
            </div>
            <button class="btn btn-primary" onclick="registerUser()">‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
            <button class="btn btn-secondary" onclick="showLoginSelection()">‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®</button>
        </div>

        <!-- User Login Section -->
        <div id="userLoginSection" class="card hidden">
            <h2>‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶≤‡¶ó‡¶ø‡¶®</h2>
            <div class="form-group">
                <label for="loginPhone">‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
                <input type="tel" id="loginPhone" placeholder="01XXXXXXXXX">
            </div>
            <div class="form-group">
                <label for="loginPassword">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
                <div style="position: relative;">
                    <input type="password" id="loginPassword" placeholder="‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°">
                    <span class="password-toggle" onclick="togglePassword('loginPassword')">üëÅÔ∏è</span>
                </div>
            </div>
            <button class="btn btn-primary" onclick="loginUser()">‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</button>
            <button class="btn btn-link" onclick="showForgotPassword()">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®?</button>
            <button class="btn btn-secondary" onclick="showLoginSelection()">‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®</button>
        </div>

        <!-- Forgot Password Section -->
        <div id="forgotPasswordSection" class="card hidden">
            <h2>‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü</h2>
            <div class="form-group">
                <label for="resetPhone">‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
                <input type="tel" id="resetPhone" placeholder="01XXXXXXXXX">
            </div>
            <button class="btn btn-primary" onclick="sendResetOTP()">OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®</button>
            <div id="resetOtpSection" class="form-group hidden">
                <label for="resetOtp">OTP ‡¶ï‡ßã‡¶°</label>
                <input type="text" id="resetOtp" placeholder="OTP ‡¶ï‡ßã‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®">
                <div class="form-group">
                    <label for="newPassword">‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
                    <div style="position: relative;">
                        <input type="password" id="newPassword" placeholder="‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°">
                        <span class="password-toggle" onclick="togglePassword('newPassword')">üëÅÔ∏è</span>
                    </div>
                </div>
                <button class="btn btn-primary" onclick="resetPassword()">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®</button>
            </div>
            <button class="btn btn-secondary" onclick="showUserLogin()">‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®</button>
        </div>

        <!-- Admin Login Section - Updated with security features -->
        <div id="adminLoginSection" class="card hidden">
            <h2>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶ø‡¶®</h2>
            <div class="form-group">
                <label for="adminUsername">‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ</label>
                <input type="text" id="adminUsername" placeholder="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ">
            </div>
            <div class="form-group">
                <label for="adminPassword">‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</label>
                <div style="position: relative;">
                    <input type="password" id="adminPassword" placeholder="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°">
                    <span class="password-toggle" onclick="togglePassword('adminPassword')">üëÅÔ∏è</span>
                </div>
                <div id="loginAttempts" class="login-attempts hidden"></div>
            </div>
            <button class="btn btn-primary" onclick="loginAdmin()">‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</button>
            <button class="btn btn-secondary" onclick="showLoginSelection()">‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®</button>
        </div>

        <!-- User Home Section -->
        <div id="userHomeSection" class="card hidden">
            <h2>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü</h2>
            <div class="loan-details">
                <h3 id="userNameDisplay"></h3>
                <p>‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: <span id="userPhoneDisplay"></span></p>
                <p>‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: <span id="userBalance"></span></p>
            </div>
            
            <h3>‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶≤‡ßã‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®</h3>
            <button class="btn btn-primary" onclick="showLoanApplication()">‡¶≤‡ßã‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</button>
            
            <h3>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶≤‡ßã‡¶®</h3>
            <div id="userActiveLoans"></div>
        </div>

        <!-- Loan Application Section -->
        <div id="loanApplicationSection" class="card hidden">
            <h2>‡¶≤‡ßã‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®</h2>
            <div class="form-group">
                <label for="loanAmount">‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡ß≥)</label>
                <input type="number" id="loanAmount" placeholder="500-50000">
            </div>
            <div class="form-group">
                <label for="loanDuration">‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ (‡¶¶‡¶ø‡¶®)</label>
                <select id="loanDuration">
                    <option value="7">7 ‡¶¶‡¶ø‡¶®</option>
                    <option value="14">14 ‡¶¶‡¶ø‡¶®</option>
                    <option value="30">30 ‡¶¶‡¶ø‡¶®</option>
                </select>
            </div>
            <div class="form-group">
                <label for="loanPurpose">‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø</label>
                <textarea id="loanPurpose" placeholder="‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"></textarea>
            </div>
            <button class="btn btn-primary" onclick="applyLoan()">‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®</button>
            <button class="btn btn-secondary" onclick="showUserHome()">‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
        </div>

        <!-- Transactions Section -->
        <div id="transactionsSection" class="card hidden">
            <h2>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®</h2>
            <div id="transactionsList">
                <!-- Transactions will be listed here -->
            </div>
            <button class="btn btn-secondary" onclick="showUserHome()">‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®</button>
        </div>

        <!-- Admin Dashboard Section -->
        <div id="adminDashboardSection" class="card hidden">
            <h2>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°</h2>
            <div class="loan-details">
                <h3>‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®</h3>
                <p>‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: <span id="totalUsers">0</span></p>
                <p>‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶≤‡ßã‡¶®: <span id="activeLoans">0</span></p>
                <p>‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶®: <span id="pendingLoans">0</span></p>
            </div>
        </div>

        <!-- Pending Loans Section -->
        <div id="pendingLoansSection" class="card hidden">
            <h2>‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶®</h2>
            <div id="pendingLoansList">
                <!-- Pending loans will be listed here -->
            </div>
        </div>

        <!-- Payment Settings Section -->
        <div id="paymentSettingsSection" class="card hidden">
            <h2>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏</h2>
            <div class="form-group">
                <label for="bkashNumber">‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
                <input type="text" id="bkashNumber" placeholder="‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞">
            </div>
            <div class="form-group">
                <label for="nogodNumber">‡¶®‡¶ó‡¶¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
                <input type="text" id="nogodNumber" placeholder="‡¶®‡¶ó‡¶¶ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞">
            </div>
            <button class="btn btn-primary" onclick="savePaymentSettings()">‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
        </div>
    </div>

    <script>
        // Demo data with passwords
        let users = [
            { 
                phone: "01911276328", 
                name: "‡¶°‡ßá‡¶Æ‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ", 
                password: "demo123", // In real app, store hashed passwords
                balance: 1000, 
                loans: [],
                transactions: []
            }
        ];
        
        let pendingLoans = [];
        let approvedLoans = [];
        
        let paymentSettings = {
            bkash: "01911276328",
            nogod: "01711223344"
        };
        
        // Enhanced admin credentials (in real app, store hashed passwords server-side)
        const ADMIN_CREDENTIALS = {
            username: "admin",
            // This should be a hashed password in production
            password: "Admin@Secure123!" // Strong password example
        };

        // Security variables
        let failedLoginAttempts = 0;
        const MAX_LOGIN_ATTEMPTS = 5;
        const LOCKOUT_TIME = 15 * 60 * 1000; // 15 minutes
        let lockoutUntil = 0;
        let sessionTimeout;
        const SESSION_DURATION = 5 * 60 * 1000; // 5 minutes
        let currentOTP = null;
        let currentUser = null;
        let isAdmin = false;
        let otpAttempts = 0;
        const MAX_OTP_ATTEMPTS = 3;

        // Hide all sections
        function hideAllSections() {
            const sections = document.querySelectorAll('.container > .card');
            sections.forEach(section => {
                section.classList.add('hidden');
            });
        }

        // Show toast message
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.style.backgroundColor = isError ? '#EF4444' : '#10B981';
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        // Toggle password visibility
        function togglePassword(fieldId) {
            const field = document.getElementById(fieldId);
            field.type = field.type === 'password' ? 'text' : 'password';
        }

        // Show login selection
        function showLoginSelection() {
            hideAllSections();
            document.getElementById('loginSelection').classList.remove('hidden');
            document.getElementById('userNav').classList.add('hidden');
            document.getElementById('adminNav').classList.add('hidden');
            document.getElementById('sessionTimeout').classList.add('hidden');
            currentUser = null;
            isAdmin = false;
        }

        // Show user registration form
        function showUserRegister() {
            hideAllSections();
            document.getElementById('userRegisterSection').classList.remove('hidden');
            // Clear form fields
            document.getElementById('regPhone').value = '';
            document.getElementById('regName').value = '';
            document.getElementById('regPassword').value = '';
            document.getElementById('regConfirmPassword').value = '';
        }

        // Register new user
        function registerUser() {
            const phone = document.getElementById('regPhone').value;
            const name = document.getElementById('regName').value;
            const password = document.getElementById('regPassword').value;
            const confirmPassword = document.getElementById('regConfirmPassword').value;
            
            if (!phone || !name || !password || !confirmPassword) {
                showToast('‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                return;
            }
            
            if (password !== confirmPassword) {
                showToast('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡ßá‡¶≤‡ßá‡¶®‡¶ø', true);
                return;
            }
            
            if (users.some(u => u.phone === phone)) {
                showToast('‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá', true);
                return;
            }
            
            // In real app, hash the password before storing
            const newUser = {
                phone,
                name,
                password,
                balance: 0,
                loans: [],
                transactions: []
            };
            
            users.push(newUser);
            showToast('‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤! ‡¶è‡¶ñ‡¶® ‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®');
            showUserLogin();
        }

        // Show user login form
        function showUserLogin() {
            hideAllSections();
            document.getElementById('userLoginSection').classList.remove('hidden');
            // Clear form fields
            document.getElementById('loginPhone').value = '';
            document.getElementById('loginPassword').value = '';
        }

        // User login
        function loginUser() {
            const phone = document.getElementById('loginPhone').value;
            const password = document.getElementById('loginPassword').value;
            
            const user = users.find(u => u.phone === phone);
            
            if (!user) {
                showToast('‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø', true);
                return;
            }
            
            if (user.password !== password) { // In real app, compare hashed passwords
                showToast('‡¶≠‡ßÅ‡¶≤ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°', true);
                return;
            }
            
            currentUser = user;
            isAdmin = false;
            
            document.getElementById('userNameDisplay').textContent = currentUser.name;
            document.getElementById('userPhoneDisplay').textContent = currentUser.phone;
            document.getElementById('userBalance').textContent = '‡ß≥' + currentUser.balance;
            
            document.getElementById('userNav').classList.remove('hidden');
            showUserHome();
            showToast('‡¶≤‡¶ó‡¶ø‡¶® ‡¶∏‡¶´‡¶≤');
        }

        // Show forgot password form
        function showForgotPassword() {
            hideAllSections();
            document.getElementById('forgotPasswordSection').classList.remove('hidden');
            document.getElementById('resetOtpSection').classList.add('hidden');
            // Clear form fields
            document.getElementById('resetPhone').value = '';
            document.getElementById('resetOtp').value = '';
            document.getElementById('newPassword').value = '';
        }

        // Send OTP for password reset
        function sendResetOTP() {
            const phone = document.getElementById('resetPhone').value;
            
            if (!users.some(u => u.phone === phone)) {
                showToast('‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á', true);
                return;
            }
            
            currentOTP = generateOTP();
            otpAttempts = 0;
            
            // In real app, send this OTP via SMS
            console.log(`Reset OTP for ${phone}: ${currentOTP}`);
            alert(`‡¶°‡ßá‡¶Æ‡ßã: ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü OTP: ${currentOTP}`);
            
            document.getElementById('resetOtpSection').classList.remove('hidden');
            showToast('OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
        }

        // Generate a random 4-digit OTP
        function generateOTP() {
            return Math.floor(1000 + Math.random() * 9000);
        }

        // Reset password with OTP verification
        function resetPassword() {
            const enteredOTP = document.getElementById('resetOtp').value;
            const newPassword = document.getElementById('newPassword').value;
            const phone = document.getElementById('resetPhone').value;
            
            if (!enteredOTP || !newPassword) {
                showToast('‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                return;
            }
            
            if (parseInt(enteredOTP) !== currentOTP) {
                otpAttempts++;
                if (otpAttempts >= MAX_OTP_ATTEMPTS) {
                    showToast('‡¶Ö‡¶®‡ßá‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≠‡ßÅ‡¶≤ OTP ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤', true);
                    showUserLogin();
                    return;
                }
                showToast('‡¶≠‡ßÅ‡¶≤ OTP ‡¶ï‡ßã‡¶°', true);
                return;
            }
            
            const user = users.find(u => u.phone === phone);
            if (user) {
                // In real app, hash the password before storing
                user.password = newPassword;
                showToast('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
                showUserLogin();
            }
        }

        // Show admin login form
        function showAdminLogin() {
            hideAllSections();
            document.getElementById('adminLoginSection').classList.remove('hidden');
            // Clear form fields
            document.getElementById('adminUsername').value = '';
            document.getElementById('adminPassword').value = '';
            document.getElementById('loginAttempts').classList.add('hidden');
        }

        // Enhanced admin login function
        function loginAdmin() {
            // Check if account is locked
            if (Date.now() < lockoutUntil) {
                const remaining = Math.ceil((lockoutUntil - Date.now()) / 60000);
                showToast(`‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ${remaining} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®`, true);
                return;
            }
            
            const username = document.getElementById('adminUsername').value;
            const password = document.getElementById('adminPassword').value;
            
            if (!username || !password) {
                showToast('‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                return;
            }
            
            // In real app, compare hashed passwords
            if (username === ADMIN_CREDENTIALS.username && 
                password === ADMIN_CREDENTIALS.password) {
                
                // Reset failed attempts
                failedLoginAttempts = 0;
                document.getElementById('loginAttempts').classList.add('hidden');
                
                // Set admin session
                isAdmin = true;
                currentUser = null;
                document.getElementById('adminNav').classList.remove('hidden');
                document.getElementById('userNav').classList.add('hidden');
                
                // Start session timeout
                startSessionTimer();
                
                showAdminDashboard();
                showToast('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶ø‡¶® ‡¶∏‡¶´‡¶≤');
            } else {
                failedLoginAttempts++;
                
                // Show remaining attempts
                const attemptsLeft = MAX_LOGIN_ATTEMPTS - failedLoginAttempts;
                const attemptsMsg = `‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ/‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡•§ ${attemptsLeft} ‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶¨‡¶æ‡¶ï‡¶ø`;
                document.getElementById('loginAttempts').textContent = attemptsMsg;
                document.getElementById('loginAttempts').classList.remove('hidden');
                
                if (failedLoginAttempts >= MAX_LOGIN_ATTEMPTS) {
                    // Lock the account
                    lockoutUntil = Date.now() + LOCKOUT_TIME;
                    showToast('‡¶Ö‡¶®‡ßá‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', true);
                } else {
                    showToast('‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°', true);
                }
            }
        }
        
        // Session management
        function startSessionTimer() {
            // Show timeout counter
            document.getElementById('sessionTimeout').classList.remove('hidden');
            updateTimeoutDisplay(SESSION_DURATION);
            
            // Clear any existing timeout
            if (sessionTimeout) clearTimeout(sessionTimeout);
            
            // Set new timeout
            sessionTimeout = setTimeout(() => {
                logoutAdmin();
                showToast('‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', true);
            }, SESSION_DURATION);
            
            // Update display every second
            let remaining = SESSION_DURATION;
            const interval = setInterval(() => {
                remaining -= 1000;
                updateTimeoutDisplay(remaining);
                
                if (remaining <= 0) {
                    clearInterval(interval);
                }
            }, 1000);
            
            // Reset timer on activity
            document.addEventListener('click', resetSessionTimer);
            document.addEventListener('keypress', resetSessionTimer);
        }
        
        function updateTimeoutDisplay(ms) {
            const minutes = Math.floor(ms / 60000);
            const seconds = Math.floor((ms % 60000) / 1000);
            document.getElementById('timeoutCounter').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        function resetSessionTimer() {
            startSessionTimer(); // Restart the timer
        }

        // Secure admin dashboard show function
        function secureShowAdminDashboard() {
            if (!isAdmin) {
                showToast('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                showAdminLogin();
                return;
            }
            showAdminDashboard();
        }

        // Secure pending loans show function
        function secureShowPendingLoans() {
            if (!isAdmin) {
                showToast('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                showAdminLogin();
                return;
            }
            showPendingLoans();
        }

        // Secure payment settings show function
        function secureShowPaymentSettings() {
            if (!isAdmin) {
                showToast('‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶ø‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', true);
                showAdminLogin();
                return;
            }
            showPaymentSettings();
        }

        // Show admin dashboard
        function showAdminDashboard() {
            hideAllSections();
            document.getElementById('adminDashboardSection').classList.remove('hidden');
            
            // Update stats
            document.getElementById('totalUsers').textContent = users.length;
            document.getElementById('activeLoans').textContent = approvedLoans.length;
            document.getElementById('pendingLoans').textContent = pendingLoans.length;
        }

        // Show user home
        function showUserHome() {
            hideAllSections();
            document.getElementById('userHomeSection').classList.remove('hidden');
            
            // Update user info
            document.getElementById('userNameDisplay').textContent = currentUser.name;
            document.getElementById('userPhoneDisplay').textContent = currentUser.phone;
            document.getElementById('userBalance').textContent = '‡ß≥' + currentUser.balance;
            
            // Show active loans
            const activeLoansDiv = document.getElementById('userActiveLoans');
            activeLoansDiv.innerHTML = '';
            
            if (currentUser.loans.length === 0) {
                activeLoansDiv.innerHTML = '<p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶≤‡ßã‡¶® ‡¶®‡ßá‡¶á</p>';
            } else {
                currentUser.loans.forEach(loan => {
                    const loanDiv = document.createElement('div');
                    loanDiv.className = 'loan-details';
                    loanDiv.innerHTML = `
                        <p>‡¶≤‡ßã‡¶® ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ‡ß≥${loan.amount}</p>
                        <p>‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: ${loan.duration} ‡¶¶‡¶ø‡¶®</p>
                        <p>‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: ${loan.approved ? '‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§' : '‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶Ø‡¶º'}</p>
                        ${loan.approved ? `<p>‡¶™‡¶∞‡¶ø‡¶∂‡ßã‡¶ß‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date(loan.dueDate).toLocaleDateString()}</p>` : ''}
                    `;
                    activeLoansDiv.appendChild(loanDiv);
                });
            }
        }

        // Show loan application form
        function showLoanApplication() {
            hideAllSections();
            document.getElementById('loanApplicationSection').classList.remove('hidden');
            // Clear form fields
            document.getElementById('loanAmount').value = '';
            document.getElementById('loanPurpose').value = '';
        }

        // Apply for a loan
        function applyLoan() {
            const amount = parseInt(document.getElementById('loanAmount').value);
            const duration = parseInt(document.getElementById('loanDuration').value);
            const purpose = document.getElementById('loanPurpose').value;
            
            if (!amount || amount < 500 || amount > 50000) {
                showToast('‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡ß≥500 ‡¶•‡ßá‡¶ï‡ßá ‡ß≥50,000 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶≤‡ßã‡¶® ‡¶®‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá', true);
                return;
            }
            
            if (!purpose) {
                showToast('‡¶≤‡ßã‡¶®‡ßá‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®', true);
                return;
            }
            
            const newLoan = {
                id: Date.now(),
                amount,
                duration,
                purpose,
                approved: false,
                appliedDate: new Date()
            };
            
            // Add to user's loans
            currentUser.loans.push(newLoan);
            
            // Add to pending loans for admin approval
            pendingLoans.push({
                ...newLoan,
                userId: currentUser.phone,
                userName: currentUser.name
            });
            
            // Add transaction record
            currentUser.transactions.push({
                type: 'loan_application',
                amount,
                date: new Date(),
                description: `‡¶≤‡ßã‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® (${purpose})`
            });
            
            showToast('‡¶≤‡ßã‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
            showUserHome();
        }

        // Show transactions
        function showTransactions() {
            hideAllSections();
            document.getElementById('transactionsSection').classList.remove('hidden');
            
            const transactionsList = document.getElementById('transactionsList');
            transactionsList.innerHTML = '';
            
            if (currentUser.transactions.length === 0) {
                transactionsList.innerHTML = '<p>‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</p>';
            } else {
                currentUser.transactions.forEach(transaction => {
                    const transactionDiv = document.createElement('div');
                    transactionDiv.className = 'transaction-item';
                    transactionDiv.innerHTML = `
                        <p><strong>${transaction.description}</strong></p>
                        <p>‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ‡ß≥${transaction.amount}</p>
                        <p>‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date(transaction.date).toLocaleString()}</p>
                    `;
                    transactionsList.appendChild(transactionDiv);
                });
            }
        }

        // Show pending loans for admin approval
        function showPendingLoans() {
            hideAllSections();
            document.getElementById('pendingLoansSection').classList.remove('hidden');
            
            const pendingLoansList = document.getElementById('pendingLoansList');
            pendingLoansList.innerHTML = '';
            
            if (pendingLoans.length === 0) {
                pendingLoansList.innerHTML = '<p>‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡ßã‡¶® ‡¶®‡ßá‡¶á</p>';
            } else {
                pendingLoans.forEach((loan, index) => {
                    const loanDiv = document.createElement('div');
                    loanDiv.className = 'loan-details';
                    loanDiv.innerHTML = `
                        <h3>${loan.userName} (${loan.userId})</h3>
                        <p>‡¶≤‡ßã‡¶® ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ‡ß≥${loan.amount}</p>
                        <p>‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: ${loan.duration} ‡¶¶‡¶ø‡¶®</p>
                        <p>‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø: ${loan.purpose}</p>
                        <p>‡¶Ü‡¶¨‡ßá‡¶¶‡¶®‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${new Date(loan.appliedDate).toLocaleDateString()}</p>
                        <button class="btn btn-primary" onclick="approveLoan(${index})">‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</button>
                        <button class="btn btn-danger" onclick="rejectLoan(${index})">‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</button>
                    `;
                    pendingLoansList.appendChild(loanDiv);
                });
            }
        }

        // Approve a loan
        function approveLoan(index) {
            const loan = pendingLoans[index];
            
            // Find the user
            const user = users.find(u => u.phone === loan.userId);
            if (user) {
                // Update the loan status in user's loans
                const userLoan = user.loans.find(l => l.id === loan.id);
                if (userLoan) {
                    userLoan.approved = true;
                    userLoan.dueDate = new Date(Date.now() + loan.duration * 24 * 60 * 60 * 1000);
                    
                    // Add to approved loans
                    approvedLoans.push(loan);
                    
                    // Add transaction record
                    user.transactions.push({
                        type: 'loan_approved',
                        amount: loan.amount,
                        date: new Date(),
                        description: `‡¶≤‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ (${loan.purpose})`
                    });
                    
                    // Update user balance
                    user.balance += loan.amount;
                }
            }
            
            // Remove from pending loans
            pendingLoans.splice(index, 1);
            
            showToast('‡¶≤‡ßã‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
            showPendingLoans();
        }

        // Reject a loan
        function rejectLoan(index) {
            const loan = pendingLoans[index];
            
            // Find the user
            const user = users.find(u => u.phone === loan.userId);
            if (user) {
                // Remove the loan from user's loans
                user.loans = user.loans.filter(l => l.id !== loan.id);
                
                // Add transaction record
                user.transactions.push({
                    type: 'loan_rejected',
                    amount: loan.amount,
                    date: new Date(),
                    description: `‡¶≤‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶§ (${loan.purpose})`
                });
            }
            
            // Remove from pending loans
            pendingLoans.splice(index, 1);
            
            showToast('‡¶≤‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
            showPendingLoans();
        }

        // Show payment settings
        function showPaymentSettings() {
            hideAllSections();
            document.getElementById('paymentSettingsSection').classList.remove('hidden');
            
            // Set current values
            document.getElementById('bkashNumber').value = paymentSettings.bkash;
            document.getElementById('nogodNumber').value = paymentSettings.nogod;
        }

        // Save payment settings
        function savePaymentSettings() {
            paymentSettings.bkash = document.getElementById('bkashNumber').value;
            paymentSettings.nogod = document.getElementById('nogodNumber').value;
            
            showToast('‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
            showAdminDashboard();
        }

        // Enhanced logout
        function logoutAdmin() {
            isAdmin = false;
            document.getElementById('adminNav').classList.add('hidden');
            document.getElementById('sessionTimeout').classList.add('hidden');
            if (sessionTimeout) clearTimeout(sessionTimeout);
            showLoginSelection();
            showToast('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶∏‡¶´‡¶≤');
            
            // Remove event listeners
            document.removeEventListener('click', resetSessionTimer);
            document.removeEventListener('keypress', resetSessionTimer);
        }

        // Logout user
        function logoutUser() {
            currentUser = null;
            showLoginSelection();
            showToast('‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶∏‡¶´‡¶≤');
        }

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            showLoginSelection();
        });
    </script>
</body>
</html>
